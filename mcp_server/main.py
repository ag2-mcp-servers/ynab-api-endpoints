# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:31:13+00:00



import argparse
import json
import os
from datetime import date as date_aliased
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    AccountResponse,
    AccountsResponse,
    BudgetDetailResponse,
    BudgetSettingsResponse,
    BudgetSummaryResponse,
    BulkResponse,
    BulkTransactions,
    CategoriesResponse,
    CategoryResponse,
    ErrorResponse,
    HybridTransactionsResponse,
    MonthDetailResponse,
    MonthSummariesResponse,
    PatchMonthCategoryWrapper,
    PatchTransactionsWrapper,
    PayeeLocationResponse,
    PayeeLocationsResponse,
    PayeeResponse,
    PayeesResponse,
    PostAccountWrapper,
    PostTransactionsWrapper,
    PutTransactionWrapper,
    SaveCategoryResponse,
    SaveTransactionsResponse,
    ScheduledTransactionResponse,
    ScheduledTransactionsResponse,
    TransactionResponse,
    TransactionsImportResponse,
    TransactionsResponse,
    Type1,
    UserResponse,
)

app = MCPProxy(
    contact={'x-twitter': 'ynab'},
    description='Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com',
    title='YNAB API Endpoints',
    version='1.0.0',
    servers=[{'url': 'https://api.youneedabudget.com/v1'}],
)


@app.get(
    '/budgets',
    description=""" Returns budgets list with summary information """,
    tags=['budget_info_management', 'account_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_budgets(include_accounts: Optional[bool] = None):
    """
    List budgets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}',
    description=""" Returns a single budget with all related entities.  This resource is effectively a full budget export. """,
    tags=['budget_info_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_budget_by_id(budget_id: str, last_knowledge_of_server: Optional[int] = None):
    """
    Single budget
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/accounts',
    description=""" Returns all accounts """,
    tags=['account_operations', 'budget_info_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_accounts(budget_id: str, last_knowledge_of_server: Optional[int] = None):
    """
    Account list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/budgets/{budget_id}/accounts',
    description=""" Creates a new account """,
    tags=['account_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_account(budget_id: str, body: PostAccountWrapper = ...):
    """
    Create a new account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/accounts/{account_id}',
    description=""" Returns a single account """,
    tags=['account_operations', 'budget_info_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_account_by_id(budget_id: str, account_id: UUID = ...):
    """
    Single account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/accounts/{account_id}/transactions',
    description=""" Returns all transactions for a specified account """,
    tags=['account_operations', 'transaction_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_transactions_by_account(
    budget_id: str,
    account_id: str = ...,
    since_date: Optional[date_aliased] = None,
    type: Optional[Type1] = None,
    last_knowledge_of_server: Optional[int] = None,
):
    """
    List account transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/categories',
    description=""" Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC). """,
    tags=['category_operations', 'budget_info_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_categories(budget_id: str, last_knowledge_of_server: Optional[int] = None):
    """
    List categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/categories/{category_id}',
    description=""" Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC). """,
    tags=['budget_info_management', 'category_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_category_by_id(budget_id: str, category_id: str = ...):
    """
    Single category
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/categories/{category_id}/transactions',
    description=""" Returns all transactions for a specified category """,
    tags=['transaction_operations', 'category_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_transactions_by_category(
    budget_id: str,
    category_id: str = ...,
    since_date: Optional[date_aliased] = None,
    type: Optional[Type1] = None,
    last_knowledge_of_server: Optional[int] = None,
):
    """
    List category transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/months',
    description=""" Returns all budget months """,
    tags=['budget_info_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_budget_months(budget_id: str, last_knowledge_of_server: Optional[int] = None):
    """
    List budget months
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/months/{month}',
    description=""" Returns a single budget month """,
    tags=['budget_info_management', 'transaction_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_budget_month(budget_id: str, month: date_aliased = ...):
    """
    Single budget month
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/months/{month}/categories/{category_id}',
    description=""" Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC). """,
    tags=['budget_info_management', 'category_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_month_category_by_id(
    budget_id: str, month: date_aliased = ..., category_id: str = ...
):
    """
    Single category for a specific budget month
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/budgets/{budget_id}/months/{month}/categories/{category_id}',
    description=""" Update a category for a specific month.  Only `budgeted` amount can be updated. """,
    tags=['budget_info_management', 'category_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_month_category(
    budget_id: str,
    month: date_aliased = ...,
    category_id: str = ...,
    body: PatchMonthCategoryWrapper = ...,
):
    """
    Update a category for a specific month
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/payee_locations',
    description=""" Returns all payee locations """,
    tags=['payee_data_management', 'budget_info_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_payee_locations(budget_id: str):
    """
    List payee locations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/payee_locations/{payee_location_id}',
    description=""" Returns a single payee location """,
    tags=['payee_data_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_payee_location_by_id(budget_id: str, payee_location_id: str = ...):
    """
    Single payee location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/payees',
    description=""" Returns all payees """,
    tags=['payee_data_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_payees(budget_id: str, last_knowledge_of_server: Optional[int] = None):
    """
    List payees
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/payees/{payee_id}',
    description=""" Returns a single payee """,
    tags=['payee_data_management', 'budget_info_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_payee_by_id(budget_id: str, payee_id: str = ...):
    """
    Single payee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/payees/{payee_id}/payee_locations',
    description=""" Returns all payee locations for a specified payee """,
    tags=['payee_data_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_payee_locations_by_payee(budget_id: str, payee_id: str = ...):
    """
    List locations for a payee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/payees/{payee_id}/transactions',
    description=""" Returns all transactions for a specified payee """,
    tags=['transaction_operations', 'payee_data_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_transactions_by_payee(
    budget_id: str,
    payee_id: str = ...,
    since_date: Optional[date_aliased] = None,
    type: Optional[Type1] = None,
    last_knowledge_of_server: Optional[int] = None,
):
    """
    List payee transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/scheduled_transactions',
    description=""" Returns all scheduled transactions """,
    tags=['scheduled_transaction_operations', 'transaction_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_scheduled_transactions(
    budget_id: str, last_knowledge_of_server: Optional[int] = None
):
    """
    List scheduled transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/scheduled_transactions/{scheduled_transaction_id}',
    description=""" Returns a single scheduled transaction """,
    tags=['scheduled_transaction_operations', 'budget_info_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_scheduled_transaction_by_id(
    budget_id: str, scheduled_transaction_id: str = ...
):
    """
    Single scheduled transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/settings',
    description=""" Returns settings for a budget """,
    tags=['budget_info_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_budget_settings_by_id(budget_id: str):
    """
    Budget Settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/transactions',
    description=""" Returns budget transactions """,
    tags=['transaction_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_transactions(
    budget_id: str,
    since_date: Optional[date_aliased] = None,
    type: Optional[Type1] = None,
    last_knowledge_of_server: Optional[int] = None,
):
    """
    List transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/budgets/{budget_id}/transactions',
    description=""" Updates multiple transactions, by `id` or `import_id`. """,
    tags=['transaction_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_transactions(budget_id: str, body: PatchTransactionsWrapper = ...):
    """
    Update multiple transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/budgets/{budget_id}/transactions',
    description=""" Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint. """,
    tags=['transaction_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_transaction(budget_id: str, body: PostTransactionsWrapper = ...):
    """
    Create a single transaction or multiple transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/budgets/{budget_id}/transactions/bulk',
    description=""" Creates multiple transactions.  Although this endpoint is still supported, it is recommended to use 'POST /budgets/{budget_id}/transactions' to create multiple transactions. """,
    tags=['transaction_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def bulk_create_transactions(budget_id: str, body: BulkTransactions = ...):
    """
    Bulk create transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/budgets/{budget_id}/transactions/import',
    description=""" Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking "Import" on each account in the web application or tapping the "New Transactions" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported. """,
    tags=['transaction_operations', 'budget_info_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def import_transactions(budget_id: str):
    """
    Import transactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/budgets/{budget_id}/transactions/{transaction_id}',
    description=""" Deletes a transaction """,
    tags=['transaction_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_transaction(budget_id: str, transaction_id: str = ...):
    """
    Deletes an existing transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/budgets/{budget_id}/transactions/{transaction_id}',
    description=""" Returns a single transaction """,
    tags=['transaction_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_transaction_by_id(budget_id: str, transaction_id: str = ...):
    """
    Single transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/budgets/{budget_id}/transactions/{transaction_id}',
    description=""" Updates a single transaction """,
    tags=['transaction_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_transaction(
    budget_id: str, transaction_id: str = ..., body: PutTransactionWrapper = ...
):
    """
    Updates an existing transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user',
    description=""" Returns authenticated user information """,
    tags=['user_info_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_user():
    """
    User info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
